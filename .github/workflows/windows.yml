name: Windows

on: [push, pull_request, workflow_dispatch]

jobs:
  build-msvc:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - uses: microsoft/setup-msbuild@v1

    - name: Clone Dependencies
      run: |
        git clone https://github.com/vapoursynth/vsrepo --depth 1
        git clone https://github.com/sekrit-twc/zimg --depth 1 --shallow-submodules --recurse-submodules
        git clone https://github.com/AviSynth/AviSynthPlus.git --depth 1
        git clone https://github.com/sekrit-twc/libp2p --depth 1

    - name: Setup Python 3.8
      uses: actions/setup-python@v4
      with:
        # Version range or exact version of a Python version to use, using SemVer's version range syntax.
        python-version: '3.8'

    - name: Install required Python packages
      run: |
        python -m pip install -U pip
        pip install -U cython setuptools wheel

    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install required Python packages
      run: |
        python -m pip install -U pip
        pip install -U cython setuptools wheel

    - name: Get Python 3.11 Install Path
      run: |
        $py_install_path = (Split-Path -Path (Get-Command python.exe).Path)
        echo "PYTHON_PATH=$py_install_path" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Get version number
      run: |
        echo "VS_CURRENT_RELEASE=$(python -c "from pathlib import Path; print((Path.cwd() / 'VAPOURSYNTH_VERSION').resolve().read_text().split(' ')[-1].strip().split('-')[0])")" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Compile
      run: |
        $env:VSPYTHON_PATH="${{ env.PYTHON_PATH }}"
        msbuild msvc_project/VapourSynth.sln /t:Build /p:Configuration=Release /p:Platform=x64 /p:CurrentVersion=${{ env.VS_CURRENT_RELEASE }}
        pip install . --no-deps

        pushd installer
        $env:SKIP_COMPRESS="yes"
        $env:SKIP_WAIT="yes"
        & ".\make_portable.bat"

        pushd buildp64
        pip install . --no-deps
        popd
        popd

    - name: Package for Python 3.11
      run: |
        mkdir wheels
        python setup.py bdist_wheel -d ./wheels
        python setup.py sdist -d ./wheels --format=zip

        pushd installer
        pushd buildp64
        python setup.py bdist_wheel -d ../../wheels
        popd
        popd

    - name: Run test with Python 3.11
      run: |
        python -m unittest discover -s test -p "*test.py"

    - name: Setup Python 3.8 a second time
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Building for Python 3.8
      run: |
        pip install . --no-deps

        pushd installer
        if ("x64" -eq "x64") {
          Remove-Item 'buildp64' -Recurse
        } else {
          Remove-Item 'buildp32' -Recurse
        }

        $env:SKIP_COMPRESS="yes"
        $env:SKIP_WAIT="yes"
        & ".\make_portable.bat"

        pushd buildp64
        pip install . --no-deps
        popd
        popd

    - name: Package for Python 3.8
      run: |
        python setup.py bdist_wheel -d ./wheels
        python setup.py sdist -d ./wheels --format=zip

        pushd installer
        pushd buildp64
        python setup.py bdist_wheel -d ../../wheels
        popd
        popd

    - name: Run test with Python 3.8
      run: |
        python -m unittest discover -s test -p "*test.py"

    - uses: actions/upload-artifact@v3
      with:
        name: Wheels
        path: |
          wheels/**/*.whl
          wheels/*.whl
          wheels/**/*.zip
          wheels/*.zip

  test-windows:
    runs-on: windows-latest
    needs: build-msvc
    strategy:
      matrix:
        python: ["3.8", "3.11"]

    steps:
    - name: Setup Python ${{ matrix.python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}

    - uses: actions/download-artifact@v3
      with:
        name: Wheels

    - name: Try installing
      run: |
        pip install --no-index --find-links . vapoursynth
        pip install --no-index --find-links . vapoursynth_portable

        python -c "from vapoursynth import core; print(core.std.BlankClip())"

  public:
    runs-on: ubuntu-latest
    needs: test-windows
    if: startsWith(github.event.ref, 'refs/tags/R') && !(contains(github.event.ref, 'RC'))

    steps:
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - uses: actions/download-artifact@v3
      with:
        name: Wheels

    - name: Install twine
      run: |
        pip install -U twine

    - name: Upload VapourSynth
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN_NOT_PORTABLE }}
      run: |
        twine upload VapourSynth-*

    - name: Upload VapourSynth Portable
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN_PORTABLE }}
      run: |
        twine upload VapourSynth_portable-*
