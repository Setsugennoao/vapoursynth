name: Windows

on: [push, pull_request, workflow_dispatch]

jobs:
  build-msvc:
    runs-on: windows-latest
    
    strategy:
      matrix:
        arch: [x86, x64]
        include:
          - arch: x86
            platform: Win32
            # unable to diagnose this error during `import vapoursynth`
            # ImportError: DLL load failed while importing vapoursynth: A dynamic link library (DLL) initialization routine failed.
            test: false
          - arch: x64
            platform: x64
            test: true

    steps:
    - uses: actions/checkout@v3

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
  
    - name: Clone Dependencies
      run: |
        git clone https://github.com/vapoursynth/vsrepo --depth 1
        git clone https://github.com/sekrit-twc/zimg --branch v3.0 --depth 1
        git clone https://github.com/AviSynth/AviSynthPlus.git --depth 1
        git clone https://github.com/sekrit-twc/libp2p --depth 1

    - name: Setup Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'
        architecture: ${{ matrix.arch }}

    - name: Install cython
      run: |
        python -m pip install --upgrade pip
        pip install cython
        
    - name: Patch Python 3.11 Include Paths
      run: |
        $py_include_path = ((Split-Path -Path (Get-Command python.exe).Path) + "\include" )
        $py_binary_path = ((Split-Path -Path (Get-Command python.exe).Path) + "\libs" )
        (Get-Content -Path "msvc_project\VSScript\VSScript.vcxproj" -Raw) -replace "C:\\Program Files %28x86%29\\Python311-32\\libs",$py_binary_path | Set-Content "msvc_project\VSScript\VSScript.vcxproj"
        (Get-Content -Path "msvc_project\VSScript\VSScript.vcxproj" -Raw) -replace "C:\\Program Files %28x86%29\\Python311-32\\include",$py_include_path | Set-Content "msvc_project\VSScript\VSScript.vcxproj"
        (Get-Content -Path "msvc_project\VSScript\VSScript.vcxproj" -Raw) -replace "C:\\Program Files\\Python311\\libs",$py_binary_path | Set-Content "msvc_project\VSScript\VSScript.vcxproj"
        (Get-Content -Path "msvc_project\VSScript\VSScript.vcxproj" -Raw) -replace "C:\\Program Files\\Python311\\include",$py_include_path | Set-Content "msvc_project\VSScript\VSScript.vcxproj"

    - name: Compile
      run: |
        msbuild msvc_project/VapourSynth.sln /t:Build /p:Configuration=Release /p:Platform=${{ matrix.platform }}        
        pip install . --no-deps
        
        pushd installer
        $env:SKIP_COMPRESS="yes"
        $env:SKIP_WAIT="yes"
        & ".\make_portable.bat"
        
        if ("${{ matrix.arch }}" -eq "x64") {
          pushd buildp64
        } else {
          pushd buildp32
        }
        pip install . --no-deps
        popd
        popd

        
    - name: Package for Python 3.11
      run: |
        mkdir wheels
        pip install wheel
        python setup.py bdist_wheel -d ./wheels
        python setup.py sdist -d ./wheels --format=zip
        
        pushd installer
        if ("${{ matrix.arch }}" -eq "x64") {
          pushd buildp64
        } else {
          pushd buildp32
        }
        
        python setup.py bdist_wheel -d ../../wheels
        
        popd
        popd

    - name: Upload build artefacts
      uses: actions/upload-artifact@v2
      with:
        name: Wheels
        path: |
          wheels/**/*.whl
          wheels/*.whl
          wheels/**/*.zip
          wheels/*.zip

    - name: Run test
      if: ${{ matrix.test }}
      run: python -m unittest discover -s test -p "*test.py"
      
  test-windows:
    runs-on: windows-latest
    needs: build-msvc
    strategy:
      matrix:
        arch: [x86, x64]
        python: ["3.11"]
        
    steps:
    - name: Setup Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
        architecture: ${{ matrix.arch }}

    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: Wheels
    
    - name: Try installing
      run: |
        pip install --no-index --find-links . vapoursynth
        pip install --no-index --find-links . vapoursynth_portable
        
        python -c "from vapoursynth import core; print(core.std.BlankClip())"

  public:
    runs-on: ubuntu-latest
    needs: test-windows
    if: startsWith(github.event.ref, 'refs/tags/R') && !(contains(github.event.ref, 'RC'))

    steps:
    - name: Setup Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"

    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: Wheels

    - name: Install twine
      run: |
        pip install twine

    - name: Upload VapourSynth
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN_NOT_PORTABLE }}
      run: |
        twine upload VapourSynth-*

    - name: Upload VapourSynth Portable
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN_PORTABLE }}
      run: |
        twine upload VapourSynth_portable-*

